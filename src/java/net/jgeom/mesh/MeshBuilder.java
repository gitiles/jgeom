/*
 * jgeom: Geometry Library fo Java
 * 
 * Copyright (C) 2005  Samuel Gerber
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package net.jgeom.mesh;

import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Allows to build a generic mesh whos size is not know in adbvance.
 * 
 * @author sg
 * @version 1.0
 */
public class MeshBuilder<T> {
  private Map<Edge<T>, Edge<T>> edges = new HashMap<Edge<T>, Edge<T>>();
  private List<Face<T>> faces = new LinkedList<Face<T>>();



  /**
   * Adds an edge to the edge list. If an edge is already added that equals the other the one already inserted
   * is retuned else null is returned.
   * @param e Edge to add
   * @return The Edge already inserted or null if no edge exists.
   */
  public Edge addEdge(Edge<T> e) {
    Edge<T> tmp=edges.put(e,e);
    if(tmp != null){
    	edges.put(tmp, tmp);
    }
    return tmp;

  }

  /**
   * Add a face to the face list.
   * @param f Face to add.
   */
  public void addFace(Face<T> f) {
    faces.add(f);
  }

  /**
   * Get the mesh generated by the MeshBuilder
   * @return The GenericMesh builded by the MeshBuilder.
   */
  public Mesh<T> getMesh() {
    Mesh<T> m = new Mesh<T>(edges.size(), faces.size());
    for (int i = 0; i < faces.size(); i++) {
      m.setFace(i, faces.get(i));
    }
    Iterator<Edge<T>> it = edges.values().iterator();
    int i = 0;
    while (it.hasNext()) {				
      m.setEdge(i++, it.next());
    }

    return m;
  }

}
